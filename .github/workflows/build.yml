name: Build

on: 
  push:
    branches: 
      - "*"
    tags:
      - v*
  pull_request:

jobs:
    
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download deps
      run: |
        wget --output-document=gotestsum.tgz https://github.com/gotestyourself/gotestsum/releases/download/v0.3.5/gotestsum_0.3.5_linux_amd64.tar.gz
        tar xzf gotestsum.tgz
        rm -f gotestsum.tgz
    - name: Test
      uses: docker://golang:1-stretch
      with:
        args: ./gotestsum --jsonfile tests-reports.json  -- -count=1 -coverprofile coverage-sonar.out -coverpkg=./... ./...
      env:
        XDG_CACHE_HOME: /tmp/.cache
        HOME: /tmp/buildhome
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@v1.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [tests]
    strategy:
        matrix:
            os: [linux, darwin, windows]
            arch: [386, amd64]
    steps:
    - uses: actions/checkout@v1
    - name: prepare env for ${{ matrix.os }}_${{ matrix.arch }}
      run: mkdir -p ./build/${{ matrix.os }}_${{ matrix.arch }}
    - name: Build
      uses: docker://golang:1-stretch
      with:
        args: go build -o ./build/${{ matrix.os }}_${{ matrix.arch }}/ ./cmd/tdt2go
      env:
        XDG_CACHE_HOME: /tmp/.cache
        HOME: /tmp/buildhome
        CGO_ENABLED: 0
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
    - name: zip files
      run: |
        for PLATFORM in $(find ./build -mindepth 1 -maxdepth 1 -type d); do
          OSARCH=$(basename ${PLATFORM})
          echo "--> ${OSARCH}"
          pushd $PLATFORM >/dev/null 2>&1
          zip ../tdt2go_${OSARCH}.zip ./*
          tar czvf ../tdt2go_${OSARCH}.tgz ./*
          popd >/dev/null 2>&1
          rm -fr $PLATFORM
        done
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset Zip
      id: upload-release-asset-aip 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/tdt2go_${{ matrix.os }}_${{ matrix.arch }}.zip
        asset_name: tdt2go_${{ matrix.os }}_${{ matrix.arch }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset tgz
      id: upload-release-asset-tgz 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/tdt2go_${{ matrix.os }}_${{ matrix.arch }}.tgz
        asset_name: tdt2go_${{ matrix.os }}_${{ matrix.arch }}.tgz
        asset_content_type: application/x-gzip
