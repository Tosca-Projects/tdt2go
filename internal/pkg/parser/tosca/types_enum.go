// Copyright 2019 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-enum
// DO NOT EDIT!

package tosca

import (
	"fmt"
)

const (
	// TypeBaseNODE is a TypeBase of type NODE
	TypeBaseNODE TypeBase = iota
	// TypeBaseRELATIONSHIP is a TypeBase of type RELATIONSHIP
	TypeBaseRELATIONSHIP
	// TypeBaseCAPABILITY is a TypeBase of type CAPABILITY
	TypeBaseCAPABILITY
	// TypeBasePOLICY is a TypeBase of type POLICY
	TypeBasePOLICY
	// TypeBaseARTIFACT is a TypeBase of type ARTIFACT
	TypeBaseARTIFACT
	// TypeBaseDATA is a TypeBase of type DATA
	TypeBaseDATA
)

const _TypeBaseName = "NODERELATIONSHIPCAPABILITYPOLICYARTIFACTDATA"

var _TypeBaseMap = map[TypeBase]string{
	0: _TypeBaseName[0:4],
	1: _TypeBaseName[4:16],
	2: _TypeBaseName[16:26],
	3: _TypeBaseName[26:32],
	4: _TypeBaseName[32:40],
	5: _TypeBaseName[40:44],
}

func (i TypeBase) String() string {
	if str, ok := _TypeBaseMap[i]; ok {
		return str
	}
	return fmt.Sprintf("TypeBase(%d)", i)
}

var _TypeBaseValue = map[string]TypeBase{
	_TypeBaseName[0:4]:   0,
	_TypeBaseName[4:16]:  1,
	_TypeBaseName[16:26]: 2,
	_TypeBaseName[26:32]: 3,
	_TypeBaseName[32:40]: 4,
	_TypeBaseName[40:44]: 5,
}

// ParseTypeBase attempts to convert a string to a TypeBase
func ParseTypeBase(name string) (TypeBase, error) {
	if x, ok := _TypeBaseValue[name]; ok {
		return TypeBase(x), nil
	}
	return TypeBase(0), fmt.Errorf("%s is not a valid TypeBase", name)
}
